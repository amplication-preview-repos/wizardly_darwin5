/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Breeder as PrismaBreeder,
  Message as PrismaMessage,
  User as PrismaUser,
} from "@prisma/client";

export class BreederServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BreederCountArgs, "select">): Promise<number> {
    return this.prisma.breeder.count(args);
  }

  async breeders(args: Prisma.BreederFindManyArgs): Promise<PrismaBreeder[]> {
    return this.prisma.breeder.findMany(args);
  }
  async breeder(
    args: Prisma.BreederFindUniqueArgs
  ): Promise<PrismaBreeder | null> {
    return this.prisma.breeder.findUnique(args);
  }
  async createBreeder(args: Prisma.BreederCreateArgs): Promise<PrismaBreeder> {
    return this.prisma.breeder.create(args);
  }
  async updateBreeder(args: Prisma.BreederUpdateArgs): Promise<PrismaBreeder> {
    return this.prisma.breeder.update(args);
  }
  async deleteBreeder(args: Prisma.BreederDeleteArgs): Promise<PrismaBreeder> {
    return this.prisma.breeder.delete(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.breeder
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.breeder
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
