/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Buyer as PrismaBuyer,
  Message as PrismaMessage,
  User as PrismaUser,
} from "@prisma/client";

export class BuyerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BuyerCountArgs, "select">): Promise<number> {
    return this.prisma.buyer.count(args);
  }

  async buyers(args: Prisma.BuyerFindManyArgs): Promise<PrismaBuyer[]> {
    return this.prisma.buyer.findMany(args);
  }
  async buyer(args: Prisma.BuyerFindUniqueArgs): Promise<PrismaBuyer | null> {
    return this.prisma.buyer.findUnique(args);
  }
  async createBuyer(args: Prisma.BuyerCreateArgs): Promise<PrismaBuyer> {
    return this.prisma.buyer.create(args);
  }
  async updateBuyer(args: Prisma.BuyerUpdateArgs): Promise<PrismaBuyer> {
    return this.prisma.buyer.update(args);
  }
  async deleteBuyer(args: Prisma.BuyerDeleteArgs): Promise<PrismaBuyer> {
    return this.prisma.buyer.delete(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.buyer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.buyer
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
